@inject AppState AppState
@inject ILocalStorageService _localStorageService
@using System.Globalization

@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">WebStoreApp</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>*@



        <CascadingAuthenticationState>

            <AuthorizeView>

                <Authorized>

                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="tvprograms">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> TV Programs
                        </NavLink>
                    </li>



                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="ratemovie">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Rate Movie
                        </NavLink>
                    </li>




                </Authorized>


                <NotAuthorized>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="/account/login">
                            <span class="oi oi-account-login" aria-hidden="true"></span> Login
                        </NavLink>
                    </li>
                </NotAuthorized>

            </AuthorizeView>

        </CascadingAuthenticationState>




    </ul>
</div>

@code { private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    protected override void OnInitialized()
    {

        AppState.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //var datetime = await _localStorageService.GetItemAsStringAsync("expirationDateTime");

        //var dt = Convert.ToDateTime(datetime.Replace("\"", " "));

        //var nowDateTime = DateTime.Now;


        //if (DateTime.Compare(dt, nowDateTime) > 0)
        //{
        //    AppState.LoggedIn = true;
        //}




    }


    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    } }
